import { createSlice } from '@reduxjs/toolkit'

import { walletInitialState } from './initialState'
import { walletReducers, walletExtraReducer } from './reducers'

const {
  connectWallet,
  updateAddress,
  updateTokenInfo,
  updateNftInfo,
  updateBalance,
  updateYoloEarnings,
  pullingTxInfo
} = walletExtraReducer

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/* export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount) => {
  const response = await fetchCount(amount)
  // The value we return becomes the `fulfilled` action payload
  return response.data
}) */

export const wallet = createSlice({
  name: 'wallet',
  initialState: walletInitialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: walletReducers,

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(connectWallet.pending, (state) => {
        state.connectionStatus = 'loading'
        state.isConnected = false
      })
      .addCase(connectWallet.fulfilled, (state, action) => {
        state.connectionStatus = 'idle'
        if (action.payload === undefined) return
        state.isConnected = !!action.payload.providerInfo
        state.providerInfo = action.payload.providerInfo
        state.txs = action.payload.txs
      })
      .addCase(connectWallet.rejected, (state, action) => walletInitialState)
      .addCase(updateAddress.pending, (state) => {
        state.addressStatus = 'loading'
      })
      .addCase(updateAddress.fulfilled, (state, action) => {
        state.addressStatus = 'idle'
        state.address = action.payload.address
        state.isConnected = Boolean(action.payload.address)
        state.username = action.payload.username
      })
      .addCase(updateTokenInfo.pending, (state) => {
        state.tokenStatus = 'loading'
      })
      .addCase(updateTokenInfo.fulfilled, (state, action) => {
        state.tokenStatus = 'idle'
        state.isTokenApproved = action.payload
      })
      .addCase(updateNftInfo.pending, (state) => {
        state.nftStatus = 'loading'
      })
      .addCase(updateNftInfo.fulfilled, (state, action) => {
        state.nftStatus = 'idle'
        if (action.payload === undefined) return
        state.hasNFT = action.payload.hasNFT
        state.claimExpirationTime = action.payload.claimExpirationTime
        state.waitlistInfo = action.payload.waitlistInfo
      })
      .addCase(updateBalance.pending, (state) => {
        state.balanceStatus = 'loading'
      })
      .addCase(updateBalance.fulfilled, (state, action) => {
        state.balanceStatus = 'idle'
        state.tokenBalance = action.payload.tokenBalance || walletInitialState.tokenBalance
        state.userBalance = action.payload.userBalance || walletInitialState.userBalance
      })
      .addCase(updateYoloEarnings.pending, (state) => {
        state.yoloEarningStatus = 'loading'
      })
      .addCase(updateYoloEarnings.fulfilled, (state, action) => {
        state.yoloEarningStatus = 'idle'
        state.yoloEarnings = action.payload
      })
      .addCase(updateYoloEarnings.rejected, (state, action) => {
        state.yoloEarningStatus = 'idle'
      })
      .addCase(pullingTxInfo.pending, (state, action) => {
        state.pendingTxStatus = 'pulling'
      })
      .addCase(pullingTxInfo.fulfilled, (state, action) => {
        state.pendingTxStatus = 'idle'
      })
      .addCase(pullingTxInfo.rejected, (state, action) => {
        state.pendingTxStatus = 'idle'
      })
  }
})

export const walletReducerActions = wallet.actions

export const walletReducer = wallet.reducer
