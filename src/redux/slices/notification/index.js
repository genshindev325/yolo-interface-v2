import { createSlice } from '@reduxjs/toolkit'

import { notificationInitialState } from './initialState'
import { notificationReducers } from './reducers'

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/* export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount) => {
  const response = await fetchCount(amount)
  // The value we return becomes the `fulfilled` action payload
  return response.data
}) */

export const notification = createSlice({
  name: 'notification',
  initialState: notificationInitialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: notificationReducers

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(priceFeedReducers.pending, (state) => {
  //       state.status = 'loading'
  //     })
  //     .addCase(priceFeedReducers.fulfilled, (state, action) => {
  //       state.status = 'idle'
  //       state.value += action.payload
  //     })
  // }
})

export const notificationReducerActions = notification.actions

export const notificationReducer = notification.reducer
