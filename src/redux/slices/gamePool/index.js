import { createSlice } from '@reduxjs/toolkit'

import { gamePoolInitialState } from './initialState'
import { gamePoolReducers, gamePoolExtraReducer } from './reducers'

const { getGamePool } = gamePoolExtraReducer

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/* export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount) => {
  const response = await fetchCount(amount)
  // The value we return becomes the `fulfilled` action payload
  return response.data
}) */

export const gamePool = createSlice({
  name: 'gamePool',
  initialState: gamePoolInitialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: gamePoolReducers,

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getGamePool.pending, (state) => {
        state.gamePoolStatus = 'loading'
      })
      .addCase(getGamePool.fulfilled, (state, action) => {
        state.lastUpdateTimestamp = Date.now()
        state.gamePoolStatus = 'idle'
        state.data = action.payload
      })
      .addCase(getGamePool.rejected, (state, action) => {
        state.lastUpdateTimestamp = Date.now()
        state.gamePoolStatus = 'rejected'
      })
  }
})

export const gamePoolReducerActions = gamePool.actions

export const gamePoolReducer = gamePool.reducer
